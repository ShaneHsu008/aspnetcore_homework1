// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace aspnetcore_homework.Models
{
    public partial class ContosouniversityContext : DbContext
    {
        public ContosouniversityContext()
        {
        }

        public ContosouniversityContext(DbContextOptions<ContosouniversityContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Course> Course { get; set; }
        public virtual DbSet<CourseInstructor> CourseInstructor { get; set; }
        public virtual DbSet<Department> Department { get; set; }
        public virtual DbSet<Enrollment> Enrollment { get; set; }
        public virtual DbSet<OfficeAssignment> OfficeAssignment { get; set; }
        public virtual DbSet<Person> Person { get; set; }
        public virtual DbSet<VwCourseStudentCount> VwCourseStudentCount { get; set; }
        public virtual DbSet<VwCourseStudents> VwCourseStudents { get; set; }
        public virtual DbSet<VwDepartmentCourseCount> VwDepartmentCourseCount { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Course>(entity =>
            {
                entity.HasIndex(e => e.DepartmentId)
                    .HasName("IX_DepartmentID");

                entity.Property(e => e.DepartmentId).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.Course)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_dbo.Course_dbo.Department_DepartmentID");
            });

            modelBuilder.Entity<Course>().HasQueryFilter(c => !c.IsDelete);

            modelBuilder.Entity<CourseInstructor>(entity =>
            {
                entity.HasKey(e => new { e.CourseId, e.InstructorId })
                    .HasName("PK_dbo.CourseInstructor");

                entity.HasIndex(e => e.CourseId)
                    .HasName("IX_CourseID");

                entity.HasIndex(e => e.InstructorId)
                    .HasName("IX_InstructorID");

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.CourseInstructor)
                    .HasForeignKey(d => d.CourseId)
                    .HasConstraintName("FK_dbo.CourseInstructor_dbo.Course_CourseID");

                entity.HasOne(d => d.Instructor)
                    .WithMany(p => p.CourseInstructor)
                    .HasForeignKey(d => d.InstructorId)
                    .HasConstraintName("FK_dbo.CourseInstructor_dbo.Instructor_InstructorID");
            });

            modelBuilder.Entity<Department>(entity =>
            {
                entity.HasIndex(e => e.InstructorId)
                    .HasName("IX_InstructorID");

                entity.Property(e => e.RowVersion).IsRowVersion();

                entity.HasOne(d => d.Instructor)
                    .WithMany(p => p.Department)
                    .HasForeignKey(d => d.InstructorId)
                    .HasConstraintName("FK_dbo.Department_dbo.Instructor_InstructorID");
            });

            modelBuilder.Entity<Department>().HasQueryFilter(d => !d.IsDelete);

            modelBuilder.Entity<Enrollment>(entity =>
            {
                entity.HasIndex(e => e.CourseId)
                    .HasName("IX_CourseID");

                entity.HasIndex(e => e.StudentId)
                    .HasName("IX_StudentID");

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.Enrollment)
                    .HasForeignKey(d => d.CourseId)
                    .HasConstraintName("FK_dbo.Enrollment_dbo.Course_CourseID");

                entity.HasOne(d => d.Student)
                    .WithMany(p => p.Enrollment)
                    .HasForeignKey(d => d.StudentId)
                    .HasConstraintName("FK_dbo.Enrollment_dbo.Person_StudentID");
            });

            modelBuilder.Entity<OfficeAssignment>(entity =>
            {
                entity.HasKey(e => e.InstructorId)
                    .HasName("PK_dbo.OfficeAssignment");

                entity.HasIndex(e => e.InstructorId)
                    .HasName("IX_InstructorID");

                entity.Property(e => e.InstructorId).ValueGeneratedNever();

                entity.HasOne(d => d.Instructor)
                    .WithOne(p => p.OfficeAssignment)
                    .HasForeignKey<OfficeAssignment>(d => d.InstructorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.OfficeAssignment_dbo.Instructor_InstructorID");
            });

            modelBuilder.Entity<Person>(entity =>
            {
                entity.Property(e => e.Discriminator).HasDefaultValueSql("('Instructor')");
            });

            modelBuilder.Entity<Person>().HasQueryFilter(p => !p.IsDelete);

            modelBuilder.Entity<VwCourseStudentCount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwCourseStudentCount");
            });

            modelBuilder.Entity<VwCourseStudents>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwCourseStudents");
            });

            modelBuilder.Entity<VwDepartmentCourseCount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwDepartmentCourseCount");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);

        public override async Task<int> SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            var courseEntries = ChangeTracker.Entries<Course>();
            foreach (var courseEntry in courseEntries)
            {
                if (courseEntry.State == EntityState.Added)
                {
                    courseEntry.CurrentValues.SetValues(new { DateModified = DateTime.Now });
                }

                if (courseEntry.State == EntityState.Deleted)
                {
                    courseEntry.Property(p => p.IsDelete).CurrentValue = true;
                    courseEntry.State = EntityState.Modified;
                }

                if (courseEntry.State == EntityState.Modified)
                {
                    courseEntry.Property(p => p.DateModified).CurrentValue = DateTime.Now;
                    courseEntry.State = EntityState.Modified;
                }
            }

            var departmentEntries = ChangeTracker.Entries<Department>();
            foreach (var departmentEntrie in departmentEntries)
            {
                if (departmentEntrie.State == EntityState.Added)
                {
                    departmentEntrie.CurrentValues.SetValues(new { DateModified = DateTime.Now });
                }

                if (departmentEntrie.State == EntityState.Deleted)
                {
                    departmentEntrie.Property(p => p.IsDelete).CurrentValue = true;
                    departmentEntrie.State = EntityState.Modified;
                }

                if (departmentEntrie.State == EntityState.Modified)
                {
                    departmentEntrie.Property(p => p.DateModified).CurrentValue = DateTime.Now;
                    departmentEntrie.State = EntityState.Modified;
                }
            }

            var personEntries = ChangeTracker.Entries<Person>();
            foreach (var personEntrie in personEntries)
            {
                if (personEntrie.State == EntityState.Added)
                {
                    personEntrie.CurrentValues.SetValues(new { DateModified = DateTime.Now });
                }

                if (personEntrie.State == EntityState.Deleted)
                {
                    personEntrie.Property(p => p.IsDelete).CurrentValue = true;
                    personEntrie.State = EntityState.Modified;
                }

                if (personEntrie.State == EntityState.Modified)
                {
                    personEntrie.Property(p => p.DateModified).CurrentValue = DateTime.Now;
                    personEntrie.State = EntityState.Modified;
                }
            }

            return (await base.SaveChangesAsync(true, cancellationToken));
        }

        public override int SaveChanges()
        {
            var courseEntries = ChangeTracker.Entries<Course>();
            foreach (var courseEntry in courseEntries)
            {
                if (courseEntry.State == EntityState.Deleted)
                {
                    courseEntry.Property(p => p.IsDelete).CurrentValue = true;
                    courseEntry.State = EntityState.Modified;
                }
            }

            var departmentEntries = ChangeTracker.Entries<Department>();
            foreach (var departmentEntrie in departmentEntries)
            {
                if (departmentEntrie.State == EntityState.Deleted)
                {
                    departmentEntrie.Property(p => p.IsDelete).CurrentValue = true;
                    departmentEntrie.State = EntityState.Modified;
                }
            }

            var personEntries = ChangeTracker.Entries<Person>();
            foreach (var personEntrie in personEntries)
            {
                if (personEntrie.State == EntityState.Deleted)
                {
                    personEntrie.Property(p => p.IsDelete).CurrentValue = true;
                    personEntrie.State = EntityState.Modified;
                }
            }

            return base.SaveChanges();
        }
    }
}